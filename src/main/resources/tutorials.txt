
Java Brains maven
https://www.youtube.com/watch?v=al7bRZzz4oU&list=PL92E89440B7BFD0F6
    scope "compile" is be default. Others are "test" "provided"
    mvn archetype:generate          use this to generate the template of your project...all sorts of templates for a lot of things


Maven tutorial luv2code
https://www.youtube.com/watch?v=Fe6lrsPmseo&list=PLEAQNNR8IlB7uvr8EJbCNJq2I82A8cqE7&ab_channel=luv2code

https://maven.apache.org/what-is-maven.html
    Maven, a Yiddish word meaning accumulator of knowledge

https://maven.apache.org/background/philosophy-of-maven.html
https://maven.apache.org/guides/getting-started/index.html
    You'll notice that all plugins in Maven look much like a dependency - and in some ways they are. This plugin
    will be automatically downloaded and used - including a specific version if you request it (the default is to
     use the latest available).

     To reference a property defined in your pom.xml, the property name uses the names of the XML elements that
     define the value, with "pom" being allowed as an alias for the project (root) element. So ${project.name}
     refers to the name of the project, ${project.version} refers to the version of the project,
     ${project.build.finalName} refers to the final name of the file created when the built project is packaged,
      etc. Note that some elements of the POM have default values, so don't need to be explicitly defined in your
      pom.xml for the values to be available here. Similarly, values in the user's settings.xml can be referenced
      using property names beginning with "settings" (for example, ${settings.localRepository} refers to the path
      of the user's local repository)

      Filtering resources can also get values from system properties; either the system properties built into Java
      (like java.version or user.home) or properties defined on the command line using the standard Java -D parameter.

      For deploying jars to an external repository, you have to configure the repository url in the pom.xml and
      the authentication information for connectiong to the repository in the settings.xm

https://maven.apache.org/guides/introduction/introduction-to-archetypes.html

https://maven.apache.org/guides/introduction/introduction-to-the-pom.html
    https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html
        All POMs extend the Super POM unless explicitly set

https://maven.apache.org/plugins/index.html
    https://maven.apache.org/plugins/maven-clean-plugin/
    https://maven.apache.org/plugins/maven-compiler-plugin/
    https://maven.apache.org/plugins/maven-deploy-plugin/
    https://maven.apache.org/surefire/maven-failsafe-plugin/
        The Failsafe Plugin is designed to run integration tests while the Surefire Plugin is designed to run unit tests.

        https://maven.apache.org/surefire/maven-failsafe-plugin/usage.html
        https://www.baeldung.com/maven-integration-test
        https://maven.apache.org/surefire/maven-failsafe-plugin/examples/skipping-tests.html
        https://maven.apache.org/surefire/maven-failsafe-plugin/examples/inclusion-exclusion.html
        https://maven.apache.org/surefire/maven-failsafe-plugin/examples/rerun-failing-tests.html
        https://maven.apache.org/surefire/maven-failsafe-plugin/examples/debugging.html
        https://maven.apache.org/surefire/maven-failsafe-plugin/examples/fork-options-and-parallel-execution.html

    https://maven.apache.org/plugins/maven-install-plugin/
    https://maven.apache.org/plugins/maven-resources-plugin/
    https://maven.apache.org/plugins/maven-site-plugin/

    https://maven.apache.org/surefire/maven-surefire-plugin/
    https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit-platform.html
        for this plugin i did not play with examples in this project, as I used the plugin in
        the Tests project, where I did JUnit5 etc

    https://maven.apache.org/surefire/maven-surefire-report-plugin/
        builds HTML reports out of junit and IT tests. Also in the Tests project

    https://maven.apache.org/plugins/maven-checkstyle-plugin/
    https://maven.apache.org/plugins/maven-checkstyle-plugin/examples/custom-checker-config.html

    https://maven.apache.org/plugins/maven-jar-plugin/
    https://maven.apache.org/plugins/maven-jar-plugin/usage.html
    https://maven.apache.org/plugins/maven-jar-plugin/examples/include-exclude.html
        Added this plugin in module sitePluginExamples ;)

    https://maven.apache.org/plugins/maven-shade-plugin/
    https://maven.apache.org/plugins/maven-shade-plugin/examples/includes-excludes.html
    https://maven.apache.org/plugins/maven-shade-plugin/examples/executable-jar.html

https://maven.apache.org/pom.html
     Install the dependency locally using the install plugin. The method is the simplest recommended method. For example:
     mvn install:install-file -Dfile=non-maven-proj.jar -DgroupId=some.group -DartifactId=non-maven-proj -Dversion=1 -Dpackaging=jar

    The classifier distinguishes artifacts that were built from the same POM but differ in content. It is some optional and
    arbitrary string that - if present - is appended to the artifact name just after the version number.
    As a motivation for this element, consider for example a project that offers an artifact targeting Java 11 but at the
    same time also an artifact that still supports Java 1.8. The first artifact could be equipped with the classifier
    jdk11 and the second one with jdk8 such that clients can choose which one to use.
    Another common use case for classifiers is to attach secondary artifacts to the project's main artifact. If you browse
    the Maven central repository, you will notice that the classifiers "sources" and "javadoc" are used to deploy the project
    source code and API docs along with the packaged class files.

    https://stackoverflow.com/questions/6646959/difference-between-maven-scope-compile-and-provided-for-jar-packaging
    https://www.baeldung.com/maven-dependency-scopes

    https://stackoverflow.com/questions/2619598/differences-between-dependencymanagement-and-dependencies-in-maven

https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
    mvn clean deploy
    The same command can be used in a multi-module scenario (i.e. a project with one or more subprojects). Maven traverses
    into every subproject and executes clean, then executes deploy (including all of the prior build phase steps)

    The phases named with hyphenated-words (pre-*, post-*, or process-*) are not usually directly called from the command
    line. These phases sequence the build, producing intermediate results that are not useful outside the build. In the
    case of invoking integration-test, the environment may be left in a hanging state.

    Code coverage tools such as Jacoco and execution container plugins such as Tomcat, Cargo, and Docker bind goals to
    the pre-integration-test phase to prepare the integration test container environment. These plugins also bind goals
    to the post-integration-test phase to collect coverage statistics or decommission the integration test container.

    Failsafe and code coverage plugins bind goals to integration-test and verify phases. The net result is test and
    coverage reports are available after the verify phase. If integration-test were to be called from the command line,
    no reports are generated. Worse is that the integration test container environment is left in a hanging state; the
    Tomcat webserver or Docker instance is left running, and Maven may not even terminate by itself.

     Plugins are artifacts that provide goals to Maven. Furthermore, a plugin may have one or more goals wherein each
     goal represents a capability of that plugin. For example, the Compiler plugin has two goals: compile and testCompile.
     The former compiles the source code of your main code, while the latter compiles the source code of your test code

     Note that adding the plugin on its own is not enough information - you must also specify the goals you want to run
     as part of your build.

     you can use the <executions> element to gain more control over the order of particular goals.

    https://stackoverflow.com/questions/26607834/maven-lifecycle-vs-phase-vs-plugin-vs-goal/


https://maven.apache.org/guides/introduction/introduction-to-profiles.html
    Different types of profile and where each is defined
        Per Project
            - Defined in the POM itself (pom.xml).
        Per User
            - Defined in the Maven-settings (%USER_HOME%/.m2/settings.xml).
        Global
            - Defined in the global Maven-settings (${maven.home}/conf/settings.xml).

        Depending on where you specify a profile, you can customize various elements...(see on the link above which)

    Profiles can be explicitly specified using the -P command line flag.

    This flag is followed by a comma-delimited list of profile IDs to use. The profile(s) specified in the option
    are activated in addition to any profiles which are activated by their activation configuration or the
    <activeProfiles> section in settings.xml

    !!!
     In case multiple profiles are active in the same POM or external file, the ones which are defined later take
     precedence over the ones defined earlier (independent of their profile id and activation order).

     mvn help:effective-pom -P skipAllTests
        this will print the effective pom file in the console...usefull when debugging a build or maven stuff

    https://mkyong.com/maven/maven-profiles-example/

https://maven.apache.org/settings.html
    mvn help:active-profiles - To see which profile will activate in a certain build, use the maven-help-plugin

    updatePolicy: This element specifies how often updates should attempt to occur.
     Maven will compare the local POM's timestamp (stored in a repository's maven-metadata file)
     to the remote. The choices are: always, daily (default), interval:X (where X is an integer
     in minutes) or never.

     https://maven.apache.org/guides/mini/guide-encryption.html
    https://stackoverflow.com/questions/46661480/how-to-secure-and-encrypt-setting-xml-paswords-file-in-maven

https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html
    Although transitive dependencies can implicitly include desired dependencies, it is a good practice to explicitly
    specify the dependencies your source code uses directly. This best practice proves its value especially when the
    dependencies of your project change their dependencies.

    For example, assume that your project A specifies a dependency on another project B, and project B specifies a
    dependency on project C. If you are directly using components in project C, and you don't specify project C in
    your project A, it may cause build failure when project B suddenly updates/removes its dependency on project C.
