
Java Brains maven
https://www.youtube.com/watch?v=al7bRZzz4oU&list=PL92E89440B7BFD0F6
    scope "compile" is be default. Others are "test" "provided"
    mvn archetype:generate          use this to generate the template of your project...all sorts of templates for a lot of things


Maven tutorial luv2code
https://www.youtube.com/watch?v=Fe6lrsPmseo&list=PLEAQNNR8IlB7uvr8EJbCNJq2I82A8cqE7&ab_channel=luv2code

https://maven.apache.org/what-is-maven.html
    Maven, a Yiddish word meaning accumulator of knowledge

https://maven.apache.org/background/philosophy-of-maven.html
https://maven.apache.org/guides/getting-started/index.html
    You'll notice that all plugins in Maven look much like a dependency - and in some ways they are. This plugin
    will be automatically downloaded and used - including a specific version if you request it (the default is to
     use the latest available).

     To reference a property defined in your pom.xml, the property name uses the names of the XML elements that
     define the value, with "pom" being allowed as an alias for the project (root) element. So ${project.name}
     refers to the name of the project, ${project.version} refers to the version of the project,
     ${project.build.finalName} refers to the final name of the file created when the built project is packaged,
      etc. Note that some elements of the POM have default values, so don't need to be explicitly defined in your
      pom.xml for the values to be available here. Similarly, values in the user's settings.xml can be referenced
      using property names beginning with "settings" (for example, ${settings.localRepository} refers to the path
      of the user's local repository)

      Filtering resources can also get values from system properties; either the system properties built into Java
      (like java.version or user.home) or properties defined on the command line using the standard Java -D parameter.

      For deploying jars to an external repository, you have to configure the repository url in the pom.xml and
      the authentication information for connectiong to the repository in the settings.xm

https://maven.apache.org/guides/introduction/introduction-to-archetypes.html

https://maven.apache.org/guides/introduction/introduction-to-the-pom.html
    https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html
        All POMs extend the Super POM unless explicitly set

https://maven.apache.org/plugins/index.html
    https://maven.apache.org/plugins/maven-clean-plugin/
    https://maven.apache.org/plugins/maven-compiler-plugin/
    https://maven.apache.org/plugins/maven-deploy-plugin/
    https://maven.apache.org/surefire/maven-failsafe-plugin/
        The Failsafe Plugin is designed to run integration tests while the Surefire Plugin is designed to run unit tests.

        https://maven.apache.org/surefire/maven-failsafe-plugin/usage.html
        https://www.baeldung.com/maven-integration-test
        https://maven.apache.org/surefire/maven-failsafe-plugin/examples/skipping-tests.html
        https://maven.apache.org/surefire/maven-failsafe-plugin/examples/inclusion-exclusion.html
        https://maven.apache.org/surefire/maven-failsafe-plugin/examples/rerun-failing-tests.html
        https://maven.apache.org/surefire/maven-failsafe-plugin/examples/debugging.html
        https://maven.apache.org/surefire/maven-failsafe-plugin/examples/fork-options-and-parallel-execution.html

    https://maven.apache.org/plugins/maven-install-plugin/
    https://maven.apache.org/plugins/maven-resources-plugin/
    https://maven.apache.org/plugins/maven-site-plugin/

    https://maven.apache.org/surefire/maven-surefire-plugin/
    https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit-platform.html
        for this plugin i did not play with examples in this project, as I used the plugin in
        the Tests project, where I did JUnit5 etc

    https://maven.apache.org/surefire/maven-surefire-report-plugin/
        builds HTML reports out of junit and IT tests. Also in the Tests project

    https://maven.apache.org/plugins/maven-checkstyle-plugin/
    https://maven.apache.org/plugins/maven-checkstyle-plugin/examples/custom-checker-config.html

    https://maven.apache.org/plugins/maven-jar-plugin/
    https://maven.apache.org/plugins/maven-jar-plugin/usage.html
    https://maven.apache.org/plugins/maven-jar-plugin/examples/include-exclude.html
        Added this plugin in module sitePluginExamples ;)

    https://maven.apache.org/plugins/maven-shade-plugin/
    https://maven.apache.org/plugins/maven-shade-plugin/examples/includes-excludes.html
    https://maven.apache.org/plugins/maven-shade-plugin/examples/executable-jar.html


